#!/usr/bin/env bash

# shellcheck disable=SC1091,SC2034,SC2016
# Customize zsh PROMPT, with ZSH_THEME=smt
[ -n "$ZSH_NAME" ] && PROMPT='%{$fg[blue]%}<-%{$fg_bold[blue]%} %! $(prompt_char) $(git_prompt_status) ${return_status}%{$reset_color%}
%{$fg_bold[green]%}%n@%m %{$fg[blue]%}%D{[%H:%M:%S]} %{$reset_color%}%{$fg[white]%}[%~]%{$reset_color%} $(git_prompt_short_sha)$(git_prompt_info)
%{$fg[blue]%}->%{$fg_bold[blue]%} %#%{$reset_color%} ' && RPROMPT=""

source "$HOME/.profile"

alias rt='tput reset'
alias aria2c-='aria2c --no-conf --file-allocation=none -x 16 -c'

install-nvm-() {
    git clone https://github.com/nvm-sh/nvm.git "$HOME/.nvm"
}

update-nvm-() {
    (
        cd "$NVM_DIR" || exit
        git fetch --tags origin
        git checkout "$(git describe --abbrev=0 --tags --match "v[0-9]*" "$(git rev-list --tags --max-count=1)")"
    )
}

update-env-scripts-() {
    curl -sSfL "https://raw.githubusercontent.com/tinkernels/userscripts/gh-pages/sys-utils/custom-shellenv/custom-shellenv.sh" | bash -s -
}

pyenvr-() {
    (
        eval "$(pyenv init -)"
        IS_FIRST_ARG_V=1
        echo "$1" | grep -qE '[0-9]+\.[0-9]+' || echo "$1" | grep -qE '[0-9]+' || IS_FIRST_ARG_V=0
        if [ "$IS_FIRST_ARG_V" -eq "1" ]; then
            pyenv shell "$1" && shift && pyenv exec "$@"
        else
            pyenv exec "$@"
        fi
    )
}

rdnstr-() {
    if [ -z "$1" ]; then
        LC_ALL=C tr -dc '[:alnum:]' </dev/urandom
    else
        LC_ALL=C tr -dc '[:alnum:]' </dev/urandom | fold -w "$1" | head -n 1
    fi
}

hash-pwd-() {
    (
        if (($# < 2)); then
            echo "usage: hash_pwd_ OPENSSL_PASSWD_PARAMS PASSWD"
            echo
            echo "openssl passwd help:"
            echo
            openssl passwd -help 2>&1 | sed -E 's/^(.*)$/    \1/g'
        else
            ARGS_=("$@")
            ARGS_4OPENSSL_=()
            i=1
            ARG_PWD_=""
            # copy args to new array except last arg
            for v in "${ARGS_[@]}"; do if ((i + 1 > ${#ARGS_[@]})); then
                ARG_PWD_="$v"
                break
            else
                ARGS_4OPENSSL_+=("$v")
                i=$((i + 1))
            fi; done
            if [ -n "$ARG_PWD_" ]; then
                echo "$ARG_PWD_" | openssl passwd "${ARGS_4OPENSSL_[@]}" -stdin
            fi

        fi
    )
}

envupdate-() {
    [ "$USER" = "root" ] && command -v env-update >/dev/null && env-update
    source /etc/profile
    # [[ "$OSTYPE" != "darwin"* ]] && echo macos
    [ -n "$ZSH_NAME" ] && source "$HOME/.zshrc"
    [ -n "$BASH" ] && source "$HOME/.bashrc"
    command -v rehash >/dev/null && rehash
    command -v hash >/dev/null && hash -r
}

scr-() {
    if [[ $# -gt 1 ]]; then
        SCR_SESSION_ALIAS_="$1"
        shift
        SCR_SESSION_=$(screen -ls | tail -n +2 | head -1 | awk '{print $1}' | grep ".$SCR_SESSION_ALIAS_")
        echo "SESSION: $SCR_SESSION_ ACTION:" "$@"
        screen -US "$SCR_SESSION_" "$@"
        unset SCR_SESSION_ALIAS_ SCR_SESSION_
    elif [[ $# == 1 ]]; then
        screen -US "$1"
    else
        screen -ls
    fi
}

zswap-() {
    local SWITCH="$1"
    local SWAP_SIZE="$2"
    [[ -z "$SWAP_SIZE" ]] && SWAP_SIZE="2G"
    [[ -z "$SWITCH" ]] && SWITCH="on"
    if [[ "$SWITCH" == "off" ]]; then
        swapoff /swapfile
        rm -f /swapfile
    elif [[ "$SWITCH" == "on" ]]; then
        if [[ ! -f /swapfile ]]; then
            fallocate -l "$SWAP_SIZE" /swapfile
            chmod 600 /swapfile
            mkswap /swapfile
        fi
        echo 1 >/sys/module/zswap/parameters/enabled
        echo 25 >/sys/module/zswap/parameters/max_pool_percent
        echo z3fold >/sys/module/zswap/parameters/zpool
        swapon /swapfile
    fi
}

install-pixi-() {
    curl -fsSL https://pixi.sh/install.sh | bash -s -
}

nvimo() {
    DIR_2_OPEN="$1"
    shift
    [ -z "$DIR_2_OPEN" ] && DIR_2_OPEN="."
    (
        cd "$DIR_2_OPEN" && unset DIR_2_OPEN && exec nvim .
    )
}

git-reset-() {
    [[ -d ".git" ]] && {
        find . -mindepth 1 -maxdepth 1 ! -name '.git' -exec rm -rfv {} \;
        git reset --hard
    }
}

try-pixi-env-() {
    command -v pixi &>/dev/null && {
        (cd "./.pixi" &>/dev/null) && {
            pixi shell-hook &>/dev/null && eval "$(pixi shell-hook)"
        }
    }
}
try-pixi-env-

pixi-init-() {
    pixi init --platform osx-64 --platform linux-64 --platform linux-aarch64 --platform osx-64 --platform osx-arm64 --platform win-64 "$@"
}

if [ -n "$BASH" ]; then
    if [ -f /etc/bashrc ]; then
        . /etc/bashrc
    fi
fi

[ -r "$HOME/.custom-shellrc" ] && source "$HOME/.custom-shellrc"
